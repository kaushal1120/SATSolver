package ai.sat.backend;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * Maps the dpll output for the adventure maze problem to a user readable solution path.
 * @author kps9907
 *
 */
public class BackEnd {
	/**
	 * List of 'At' atom mappings from the integer form of an atom to its string representation.
	 */
	private Map<Integer, String> atAtomMap = new LinkedHashMap<Integer, String>();

	/**
	 * List of satisfying bindings generated by the dpll algorithm.
	 */
	private Map<Integer, String> bindings = new HashMap<Integer, String>();

	/**
	 * Generates the solution from the evaluation obtained from the dpll algorithm.
	 */
	public void generateSolution() {
		File inputFile = new File(System.getProperty("user.dir") + "/src/io_files/dpll_output.txt");
		Scanner scanner;
		try {
			scanner = new Scanner(inputFile);
			//Reads the bindings from the input file
			while(scanner.hasNextLine()) {
				Integer x = scanner.nextInt();
				if(x.equals(0)) {
					break;
				}
				bindings.put(x, scanner.next());
			}
			//Reads the key from the input file.
			while(scanner.hasNextLine()) {
				Integer x = scanner.nextInt();
				atAtomMap.put(x, scanner.nextLine().trim());
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		//Prints out the solution according to the valuation obtained from dpll.
		if(bindings.size()==0)
			System.out.println("NO SOLUTION");
		else{
			for(int x : bindings.keySet())
				if(atAtomMap.get(x) != null && bindings.get(x).equals("T"))
					System.out.print(atAtomMap.get(x).substring(0, atAtomMap.get(x).indexOf(" "))+ " ");
		}
	}
	
	public static void main(String[] args) {
		BackEnd backEnd = new BackEnd();
		backEnd.generateSolution();
	}
}
